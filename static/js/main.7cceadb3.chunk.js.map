{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","path","LeafletMap","Home","className","to","PopupTemplate","props","f","feature","target","href","properties","website","marketnam","city","county","location","days","hours","season","started","useState","activeFeature","setActiveFeature","popupContent","setPopupContent","useEffect","console","log","geometry","Popup","position","coordinates","onClose","MapContainer","id","center","zoom","scrollWheelZoom","TileLayer","attribution","url","mapGeoJson","features","map","Marker","eventHandlers","fruit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4nhEAiBe,SAASA,IACtB,OACE,cAAC,IAAD,UACE,8BAGE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,mBAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACE,cAACE,EAAD,aAQZ,SAASA,IACP,OACE,sBAAKC,UAAU,OAAf,UACE,+CACA,8BACE,oBAAIA,UAAU,aAAd,SAIE,+BACE,cAAC,IAAD,CAAMC,GAAG,mBAAT,6BACA,iJAQZ,SAASC,EAAcC,GACrB,IAAMC,EAAID,EAAME,QAChB,OAAQ,sBAAKL,UAAU,gBAAf,UACR,gDACA,gCACE,kCACA,+BAAI,sCAAa,6BAAI,mBAAGM,OAAO,SAASC,KAAM,WAAaH,EAAEI,WAAWC,QAAnD,SAA6DL,EAAEI,WAAWE,iBAC/F,+BAAI,sCAAa,6BAAKN,EAAEI,WAAWG,UACnC,+BAAI,wCAAe,6BAAKP,EAAEI,WAAWI,YACrC,+BAAI,0CAAiB,6BAAKR,EAAEI,WAAWK,cACvC,+BAAI,sCAAa,6BAAKT,EAAEI,WAAWM,UACnC,+BAAI,uCAAc,6BAAKV,EAAEI,WAAWO,WACpC,+BAAI,wCAAe,6BAAKX,EAAEI,WAAWQ,YACnC,WACA,GAAIZ,EAAEI,WAAWS,QACf,OAAQ,+BAAI,yCAAgB,6BAAKb,EAAEI,WAAWS,aAFhD,WAUN,SAASnB,IACP,IADoB,EAIsBoB,mBAAS,MAJ/B,mBAIbC,EAJa,KAIEC,EAJF,OAKoBF,mBAAS,IAL7B,mBAKbG,EALa,KAKCC,EALD,KAgCpB,OAzBAC,qBAAU,WACRC,QAAQC,IAAI,SAAUN,GAClBA,GAAiBA,EAAcO,SAEjCJ,EAAgB,cAACK,EAAA,EAAD,CACdC,SAAU,CACRT,EAAcO,SAASG,YAAY,GACnCV,EAAcO,SAASG,YAAY,IAErCC,QAAS,WACPV,EAAiB,OANL,SASd,cAAClB,EAAD,CAAeG,QAASc,OAI1BG,EAAgB,MAEjB,CAACH,IAMI,8BACJ,eAACY,EAAA,EAAD,CAAcC,GAAG,cAAcC,OAhCpB,CAAC,OAAS,SAgC0BC,KA/BtC,GA+BkDC,iBAAiB,EAA5E,UACA,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAELC,EAAWC,SAASC,KAAI,SAAArC,GAAC,OACxB,cAACsC,EAAA,EAAD,CAEEd,SAAU,CACRxB,EAAEsB,SAASG,YAAY,GACvBzB,EAAEsB,SAASG,YAAY,IAEzBc,cAAe,CACb,MAAU,WACRvB,EAAiBhB,MAPhBA,EAAEI,WAAWoC,UAYrBvB,OAlHPG,QAAQC,IAAIc,GChBZ,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7cceadb3.chunk.js","sourcesContent":["import { React, useEffect, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport { GeoJSON, MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\nimport mapGeoJson from './resources/geodata/farmers-markets-2012.json';\r\n\r\nimport './App.css';\r\n\r\nimport { featureGroup, map } from \"leaflet\";\r\n\r\nconsole.log(mapGeoJson)\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/farmers-markets\">\r\n            <LeafletMap />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className='home'>\r\n      <h2>Nielsen Demos</h2>\r\n      <nav>\r\n        <ul className='no-bullets'>\r\n          {/* <li>\r\n            <Link to=\"/\">Demos Home</Link>\r\n          </li> */}\r\n          <li>\r\n            <Link to=\"/farmers-markets\">Farmers Markets</Link>\r\n            <p>2012 Farmers Market Locations as GeoJSON displayed over Open Street Map in a React-Leaflet application</p>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PopupTemplate(props) {\r\n  const f = props.feature;\r\n  return (<div className='feature-popup'>\r\n  <h3>Farmers Market</h3>\r\n  <table>\r\n    <tbody>\r\n    <tr><td>Name</td><td><a target=\"_blank\" href={'https://' + f.properties.website}>{f.properties.marketnam}</a></td></tr>\r\n    <tr><td>City</td><td>{f.properties.city}</td></tr>\r\n    <tr><td>County</td><td>{f.properties.county}</td></tr>\r\n    <tr><td>Location</td><td>{f.properties.location}</td></tr>\r\n    <tr><td>Days</td><td>{f.properties.days}</td></tr>\r\n    <tr><td>Hours</td><td>{f.properties.hours}</td></tr>\r\n    <tr><td>Season</td><td>{f.properties.season}</td></tr>\r\n    {(() => {\r\n      if (f.properties.started) {\r\n        return (<tr><td>Started</td><td>{f.properties.started}</td></tr>)\r\n      }\r\n    })()}\r\n    </tbody>\r\n  </table>\r\n</div>)\r\n}\r\n\r\nfunction LeafletMap() {\r\n  const latlng = [45.520, -122.625];\r\n  const zoom = 12;\r\n\r\n  const [activeFeature, setActiveFeature] = useState(null);\r\n  const [popupContent, setPopupContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    console.log('active', activeFeature)\r\n    if (activeFeature && activeFeature.geometry) {\r\n      // console.log('set here')\r\n      setPopupContent(<Popup\r\n        position={[\r\n          activeFeature.geometry.coordinates[1],\r\n          activeFeature.geometry.coordinates[0]\r\n        ]}\r\n        onClose={() => {\r\n          setActiveFeature(null);\r\n        }}\r\n      >\r\n        <PopupTemplate feature={activeFeature}/>\r\n      </Popup>)\r\n    } else {\r\n      // console.log('or here')\r\n      setPopupContent('')\r\n    }\r\n  }, [activeFeature]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(popupContent)\r\n  // }, [popupContent]);\r\n\r\n  return (<div>\r\n      <MapContainer id='leaflet-map' center={latlng} zoom={zoom} scrollWheelZoom={false}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {mapGeoJson.features.map(f => (\r\n        <Marker\r\n          key={f.properties.fruit}\r\n          position={[\r\n            f.geometry.coordinates[1],\r\n            f.geometry.coordinates[0]\r\n          ]}\r\n          eventHandlers={{\r\n            'click' : () => {\r\n              setActiveFeature(f);\r\n            }\r\n          }}\r\n        />\r\n      ))}\r\n      {popupContent}\r\n    </MapContainer>\r\n  </div>);\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}