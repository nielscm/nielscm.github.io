{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","to","path","LeafletMap","Home","useState","activeFeature","setActiveFeature","popupContent","setPopupContent","useEffect","geometry","Popup","position","coordinates","onClose","className","properties","fruit","vegetable","MapContainer","id","center","zoom","scrollWheelZoom","TileLayer","attribution","url","mapGeoJson","features","map","f","Marker","eventHandlers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gmCAgBe,SAASA,IACtB,OACE,cAAC,IAAD,UACE,gCACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,qBAAT,sCAON,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,qBAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACE,cAACE,EAAD,cAQZ,SAASA,IACP,OAAO,sCAGT,SAASD,IACP,IADoB,EAIsBE,mBAAS,MAJ/B,mBAIbC,EAJa,KAIEC,EAJF,OAKoBF,mBAAS,IAL7B,mBAKbG,EALa,KAKCC,EALD,KAwCpB,OAjCAC,qBAAU,WAEJJ,GAAiBA,EAAcK,SAEjCF,EAAgB,cAACG,EAAA,EAAD,CACdC,SAAU,CACRP,EAAcK,SAASG,YAAY,GACnCR,EAAcK,SAASG,YAAY,IAErCC,QAAS,WACPR,EAAiB,OANL,SASd,sBAAKS,UAAU,gBAAf,UACE,4CACA,gCACE,kCACA,+BAAI,uCAAc,6BAAKV,EAAcW,WAAWC,WAChD,+BAAI,2CAAkB,6BAAKZ,EAAcW,WAAWE,0BAO1DV,EAAgB,MAEjB,CAACH,IAMI,8BACJ,eAACc,EAAA,EAAD,CAAcC,GAAG,cAAcC,OAxCpB,CAAC,OAAS,SAwC0BC,KAvCtC,GAuCkDC,iBAAiB,EAA5E,UACA,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAELC,EAAWC,SAASC,KAAI,SAAAC,GAAC,OACxB,cAACC,EAAA,EAAD,CAEEnB,SAAU,CACRkB,EAAEpB,SAASG,YAAY,GACvBiB,EAAEpB,SAASG,YAAY,IAEzBmB,cAAe,CACb,MAAU,WACR1B,EAAiBwB,MAPhBA,EAAEd,WAAWC,UAYrBV,OC9GP,IAYe0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.54a84e5c.chunk.js","sourcesContent":["import { React, useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport { GeoJSON, MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport mapGeoJson from './resources/geodata/map.json';\n\nimport './App.css';\n\nimport { featureGroup, map } from \"leaflet\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/react-leaflet-map\">React Leaflet Map</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/react-leaflet-map\">\n            <LeafletMap />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction LeafletMap() {\n  const latlng = [45.520, -122.625];\n  const zoom = 12;\n\n  const [activeFeature, setActiveFeature] = useState(null);\n  const [popupContent, setPopupContent] = useState('');\n\n  useEffect(() => {\n    // console.log('active', activeFeature)\n    if (activeFeature && activeFeature.geometry) {\n      // console.log('set here')\n      setPopupContent(<Popup\n        position={[\n          activeFeature.geometry.coordinates[1],\n          activeFeature.geometry.coordinates[0]\n        ]}\n        onClose={() => {\n          setActiveFeature(null);\n        }}\n      >\n        <div className='feature-popup'>\n          <h3>Properties</h3>\n          <table>\n            <tbody>\n            <tr><td>Fruit</td><td>{activeFeature.properties.fruit}</td></tr>\n            <tr><td>Vegetable</td><td>{activeFeature.properties.vegetable}</td></tr>\n            </tbody>\n          </table>\n        </div>\n    </Popup>)\n    } else {\n      // console.log('or here')\n      setPopupContent('')\n    }\n  }, [activeFeature]);\n\n  // useEffect(() => {\n  //   console.log(popupContent)\n  // }, [popupContent]);\n\n  return (<div>\n      <MapContainer id='leaflet-map' center={latlng} zoom={zoom} scrollWheelZoom={false}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {mapGeoJson.features.map(f => (\n        <Marker\n          key={f.properties.fruit}\n          position={[\n            f.geometry.coordinates[1],\n            f.geometry.coordinates[0]\n          ]}\n          eventHandlers={{\n            'click' : () => {\n              setActiveFeature(f);\n            }\n          }}\n        />\n      ))}\n      {popupContent}\n    </MapContainer>\n  </div>);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}